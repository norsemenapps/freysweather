package com.norsemenapps.freysweather.model.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.norsemenapps.freysweather.model.model.db.ForecastPlace;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FORECAST_PLACE".
*/
public class ForecastPlaceDao extends AbstractDao<ForecastPlace, Long> {

    public static final String TABLENAME = "FORECAST_PLACE";

    /**
     * Properties of entity ForecastPlace.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Order = new Property(2, Integer.class, "order", false, "ORDER");
        public final static Property Path = new Property(3, String.class, "path", false, "PATH");
        public final static Property BigCard = new Property(4, boolean.class, "bigCard", false, "BIG_CARD");
        public final static Property IsCurrentLocation = new Property(5, boolean.class, "isCurrentLocation", false, "IS_CURRENT_LOCATION");
    };


    public ForecastPlaceDao(DaoConfig config) {
        super(config);
    }
    
    public ForecastPlaceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FORECAST_PLACE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"ORDER\" INTEGER," + // 2: order
                "\"PATH\" TEXT UNIQUE ," + // 3: path
                "\"BIG_CARD\" INTEGER NOT NULL ," + // 4: bigCard
                "\"IS_CURRENT_LOCATION\" INTEGER NOT NULL );"); // 5: isCurrentLocation
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FORECAST_PLACE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ForecastPlace entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        Integer order = entity.getOrder();
        if (order != null) {
            stmt.bindLong(3, order);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(4, path);
        }
        stmt.bindLong(5, entity.getBigCard() ? 1L: 0L);
        stmt.bindLong(6, entity.getIsCurrentLocation() ? 1L: 0L);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ForecastPlace readEntity(Cursor cursor, int offset) {
        ForecastPlace entity = new ForecastPlace( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // order
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // path
            cursor.getShort(offset + 4) != 0, // bigCard
            cursor.getShort(offset + 5) != 0 // isCurrentLocation
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ForecastPlace entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setOrder(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setPath(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBigCard(cursor.getShort(offset + 4) != 0);
        entity.setIsCurrentLocation(cursor.getShort(offset + 5) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ForecastPlace entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ForecastPlace entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
